---
description: 
globs: 
alwaysApply: false
---
# Immo-Finder Project Principles

## Architecture
- Follow microservices architecture principles
- Maintain clear separation of concerns between frontend, backend, and authentication services
- Use containerization for consistent development and deployment environments
- Implement proper API versioning and documentation
- Follow RESTful API design principles

## Security
- Implement proper authentication and authorization using Keycloak
- Follow OAuth 2.0 and OpenID Connect standards
- Never store sensitive data in client-side code
- Use environment variables for all sensitive configurations
- Implement proper input validation and sanitization
- Use HTTPS for all communications
- Follow the principle of least privilege

## Code Quality
- Write clean, maintainable, and well-documented code
- Follow SOLID principles
- Implement comprehensive unit and integration tests
- Use TypeScript for type safety
- Follow consistent code formatting and linting rules
- Use meaningful variable and function names
- Keep functions small and focused on a single responsibility

## Frontend
- Use modern React patterns and hooks
- Implement responsive design principles
- Follow accessibility guidelines (WCAG)
- Optimize for performance and loading times
- Use proper state management
- Implement error boundaries
- Use proper form validation

## Backend
- Implement proper error handling and logging
- Use database migrations for schema changes
- Implement proper caching strategies
- Follow RESTful API design principles
- Use proper database indexing
- Implement rate limiting
- Use proper connection pooling
- Use flyway for Data migration

## DevOps
- Use Infrastructure as Code (IaC)
- Implement CI/CD pipelines
- Use proper monitoring and logging
- Implement proper backup strategies
- Use proper environment separation (dev, staging, prod)
- Follow Git flow branching strategy
- Use semantic versioning

## Documentation
- Maintain up-to-date API documentation
- Document all environment variables
- Keep README files updated
- Document deployment procedures
- Document database schema
- Document security measures

## Performance
- Implement proper caching strategies
- Optimize database queries
- Use proper indexing
- Implement lazy loading where appropriate
- Optimize asset delivery
- Monitor and optimize API response times
## Testing
- Write unit tests for all business logic
- Implement integration tests for API endpoints
- Use end-to-end testing for critical user flows
- Implement proper test coverage
- Use proper mocking strategies
- Follow the testing pyramid principle

## Data Management
- Implement proper data validation
- Use proper database normalization
- Implement proper backup strategies
- Follow data privacy regulations
- Implement proper data archiving strategies
- Use proper data encryption

## Collaboration
- Use proper code review processes
- Follow consistent commit message conventions
- Use proper issue tracking
- Implement proper project management practices
- Use proper communication channels
- Follow proper release management procedures
